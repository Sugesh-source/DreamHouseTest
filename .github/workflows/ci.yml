# Unique name for this workflow
name: CI

# Definition when the workflow should run
on:
    workflow_dispatch:
    push:
        branches:
            - main
        paths-ignore:
            - 'sfdx-project.json'
            - 'README.md'

# Jobs to be executed
jobs:
    format-lint-lwc-tests:
        runs-on: ubuntu-latest
        steps:
            # Checkout the source code
            - name: 'Checkout source code'
              uses: actions/checkout@v4

            # Install Volta to enforce proper node and package manager versions
            - name: 'Install Volta'
              uses: volta-cli/action@v4

            # Cache node_modules to speed up the process
            - name: 'Restore node_modules cache'
              id: cache-npm
              uses: actions/cache@v4
              with:
                  path: node_modules
                  key: npm-${{ hashFiles('**/package-lock.json') }}
                  restore-keys: |
                      npm-${{ env.cache-name }}-
                      npm-

            # Install npm dependencies for Prettier and Jest
            - name: 'Install npm dependencies'
              if: steps.cache-npm.outputs.cache-hit != 'true'
              run: HUSKY=0 npm ci

            # Prettier formatting
            - name: 'Code formatting verification with Prettier'
              run: npm run prettier:verify

            # Lint LWC / Aura
            - name: 'Lint Lightning Web Components / Aura Components'
              run: npm run lint

            # LWC unit tests
            - name: 'Unit test Lightning Web Components'
              run: npm run test:unit:coverage

            # Upload code coverage data
            - name: 'Upload code coverage for LWC to Codecov.io'
              uses: codecov/codecov-action@v4
              with:
                  token: ${{ secrets.CODECOV_TOKEN }}
                  flags: LWC

    scratch-org-test:
        runs-on: ubuntu-latest
        needs: format-lint-lwc-tests
        if: github.actor != 'dependabot[bot]'
        steps:
            # Install Salesforce CLI
            - name: 'Install Salesforce CLI'
              run: |
                  npm install @salesforce/cli --location=global
                  nodeInstallPath=$(npm config get prefix)
                  echo "$nodeInstallPath/bin" >> $GITHUB_PATH
                  sf --version

            # Checkout the source code
            - name: 'Checkout source code'
              uses: actions/checkout@v4

            # Store secret for dev hub
            - name: 'Populate auth file with DEVHUB_SFDX_URL secret'
              shell: bash
              run: |
                  echo ${{ secrets.DEVHUB_SFDX_URL }} > ./DEVHUB_SFDX_URL.txt
                  secretFileSize=$(wc -c "./DEVHUB_SFDX_URL.txt" | awk '{print $1}')
                  if [ $secretFileSize == 1 ]; then
                      echo "Missing DEVHUB_SFDX_URL secret. Is this workflow running on a fork?";
                      exit 1;
                  fi

            # Authenticate dev hub
            - name: 'Authenticate Dev Hub'
              run: sf org login sfdx-url -f ./DEVHUB_SFDX_URL.txt -a devhub -d

            # Authenticate to the existing Scratch Org using the Auth URL from the secret
            - name: 'Authenticate to Scratch Org'
              run: |
                  echo ${{ secrets.SCRATCH_ORG_DEV_SFDX_URL }} > ./SCRATCH_ORG_DEV_SFDX_URL.txt
                  sf org login sfdx-url -f ./SCRATCH_ORG_DEV_SFDX_URL.txt -a Dreamhouse-dev

            # Set the scratch org as default
            - name: 'Set the scratch org as default'
             run: sf config set target-org=Dreamhouse-dev

            # Deploy source to scratch org
            - name: 'Push source to scratch org'
              run: sf project deploy start -ignore-conflicts

            # Assign permissionset
            - name: 'Assign permissionset to default user'
              run: sf org assign permset -n dreamhouse || echo "Permission Set already assigned, continuing..."

            # Import sample data
            - name: 'Import sample data'
              run: sf data tree import -p ./data/sample-data-plan.json || echo "Data already imported"

            # Run Apex tests in scratch org
            - name: 'Run Apex tests'
              run: sf apex test run -c -r human -d ./tests/apex -w 20

            # Upload code coverage data
            - name: 'Upload code coverage for Apex to Codecov.io'
              uses: codecov/codecov-action@v4
              with:
                  token: ${{ secrets.CODECOV_TOKEN }}
                  flags: Apex