---
name: CI
on:
    workflow_dispatch: null
    push:
        branches:
            - main
            - testSaleforce
        paths-ignore:
            - sfdx-project.json
            - README.md
jobs:
    format-lint-lwc-tests:
        runs-on: ubuntu-latest
        steps:
            - name: Checkout source code
              uses: actions/checkout@v4
            - name: Install Volta
              uses: volta-cli/action@v4
            - name: Restore node_modules cache
              id: cache-npm
              uses: actions/cache@v4
              with:
                  path: node_modules
                  key: npm-${{ hashFiles('**/package-lock.json') }}
                  restore-keys: |
                      npm-${{ env.cache-name }}-
                      npm-
            - name: Install npm dependencies
              if: steps.cache-npm.outputs.cache-hit != 'true'
              run: HUSKY=0 npm ci
            - name: Code formatting verification with Prettier
              run: npm run prettier:verify
            - name: Lint Lightning Web Components / Aura Components
              run: npm run lint
            - name: Unit test Lightning Web Components
              run: npm run test:unit:coverage
            - name: Upload code coverage for LWC to Codecov.io
              uses: codecov/codecov-action@v4
              with:
                  token: ${{ secrets.CODECOV_TOKEN }}
                  flags: LWC
    scratch-org-dev:
        runs-on: ubuntu-latest
        needs: format-lint-lwc-tests
        if: github.actor != 'dependabot[bot]'
        steps:
            - name: Install Salesforce CLI
              run: |
                  npm install @salesforce/cli --location=global
                  nodeInstallPath=$(npm config get prefix)
                  echo "$nodeInstallPath/bin" >> $GITHUB_PATH
                  sf --version
            - name: Checkout source code
              uses: actions/checkout@v4
            - name: Populate auth file with DEVHUB_SFDX_URL secret
              shell: bash
              run: |
                  echo ${{ secrets.DEVHUB_SFDX_URL }} > ./DEVHUB_SFDX_URL.txt
                  secretFileSize=$(wc -c "./DEVHUB_SFDX_URL.txt" | awk '{print $1}')
                  if [ $secretFileSize == 1 ]; then
                      echo "Missing DEVHUB_SFDX_URL secret";
                      exit 1;
                  fi
            - name: Authenticate Dev Hub
              run: sf org login sfdx-url -f ./DEVHUB_SFDX_URL.txt -a devhub -d
            # Install jq to process JSON (if needed for checking scratch org existence)
            - name: Install jq
              run: sudo apt-get install jq

            # Try to authorize the scratch org (if it exists)
            # - name: Try to authenticate existing scratch org
            #   run: |
            #       if [ -n "${{ secrets.SCRATCH_ORG_DEV_SFDX_URL }}" ]; then
            #         echo "Attempting to authenticate the existing scratch org..."
            #         echo ${{ secrets.SCRATCH_ORG_DEV_SFDX_URL }} > ./SCRATCH_ORG_DEV_SFDX_URL.txt
            #         sf org login sfdx-url -f ./SCRATCH_ORG_DEV_SFDX_URL.txt -a Dreamhouse-dev || echo "Failed to authenticate scratch org"
            #       else
            #         echo "No scratch org authentication secret provided, skipping authentication."
            #       fi

            # # Check if scratch org exists and delete if found
            # - name: Check if scratch org exists and delete if found
            #   run: |
            #       ORG_EXISTS=$(sf org list --json | jq '.result.scratchOrgs | map(select(.alias == "Dreamhouse-dev")) | length')
            #       if [ "$ORG_EXISTS" -gt 0 ]; then
            #         sf org delete scratch -p -o Dreamhouse-dev
            #         echo "Scratch org deleted."
            #       else
            #         echo "Scratch org not found, skipping deletion."
            #       fi
            - name: 'Create scratch org'
              run: sf org create scratch -f config/project-scratch-def.json -a Dreamhouse-dev -d -y 30
            - name: Set the scratch org as default
              run: |
                  sf config set target-org=Dreamhouse-dev
                  sf org display --target-org Dreamhouse-dev
            # Step to retrieve and update the SFDX Auth URL for the scratch org
            - name: 'Get the SFDX scratch org auth URL'
              run: |
                  sfdx force:org:display --target-org Dreamhouse-dev --verbose > auth_output.txt
                  SFDX_AUTH_URL=$(grep 'Sfdx Auth Url' auth_output.txt | awk '{print $3}')
                  echo "SFDX_AUTH_URL=$SFDX_AUTH_URL" >> $GITHUB_ENV
            - name: Upload Auth URL
              uses: actions/upload-artifact@v4
              with:
                  name: auth-url
                  path: auth_output.txt

            # Step to update the SCRATCH_ORG_DEV_SFDX_URL secret using BOT_ACCESS_TOKEN
            - name: Update SCRATCH_ORG_DEV_SFDX_URL secret
              env:
                  SFDX_AUTH_URL: ${{ env.SFDX_AUTH_URL }}
                  BOT_ACCESS_TOKEN: ${{ secrets.BOT_ACCESS_TOKEN }}
              run: |
                  echo "Updating SCRATCH_ORG_DEV_SFDX_URL secret..."

                  # Fetch the repository public key to get the key_id (required for API request)
                  PUBLIC_KEY_JSON=$(curl -s -H "Authorization: token $BOT_ACCESS_TOKEN" -H "Accept: application/vnd.github.v3+json" https://api.github.com/repos/Sugesh-source/DreamHouseTest/actions/secrets/public-key)
                  KEY_ID=$(echo "$PUBLIC_KEY_JSON" | jq -r .key_id)
                  PUBLIC_KEY=$(echo "$PUBLIC_KEY_JSON" | jq -r .key)
                  # Print the public key to check its value
                  echo "Public Key: $PUBLIC_KEY"

                  # Decode the public key from base64 and pipe it into OpenSSL directly, avoiding writing to a file
                  ENCRYPTED_SFDX_AUTH_URL=$(echo -n "$SFDX_AUTH_URL" | openssl pkeyutl -encrypt -pubin -inkey <(echo "$PUBLIC_KEY" | base64 -d) | base64)
                  # Check if the encryption was successful
                  if [ -z "$ENCRYPTED_SFDX_AUTH_URL" ]; then
                      echo "Failed to encrypt the SFDX_AUTH_URL"
                      exit 1
                  fi

                  # Update the GitHub secret SCRATCH_ORG_DEV_SFDX_URL using the encoded SFDX_AUTH_URL
                  curl -X PUT \
                  -H "Authorization: token $BOT_ACCESS_TOKEN" \
                  -H "Accept: application/vnd.github.v3+json" \
                  https://api.github.com/repos/Sugesh-source/DreamHouseTest/actions/secrets/SCRATCH_ORG_DEV_SFDX_URL \
                  -d @- << EOF
                  {
                    "encrypted_value": "$ENCRYPTED_SFDX_AUTH_URL",
                    "key_id": "$KEY_ID"
                  }
                  EOF
            - name: Push source to scratch org
              run: sf project deploy start --ignore-conflicts
            - name: Assign permissionset to default user
              run: |
                  sf org assign permset -n dreamhouse && echo "Permission set assigned" || echo "Permission Set already assigned"
            - name: Import sample data
              run: |
                  sf data tree import -p ./data/sample-data-plan.json && echo "Data successfully imported" || echo "Data already imported or failed"
            - name: Run Apex tests
              run: sf apex test run -c -r human -d ./tests/apex -w 20
            - name: Upload code coverage for Apex to Codecov.io
              uses: codecov/codecov-action@v4
              with:
                  token: ${{ secrets.CODECOV_TOKEN }}
                  flags: Apex
